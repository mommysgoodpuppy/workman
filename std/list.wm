from "std/list/core" import { Empty, Link };
from "std/core/int" import { intAdd, intCompare };
from "std/core/ordering" import { LT, EQ, GT };

export let rec listLength = match(list) {
  Empty => { 0 },
  Link(_, rest) => { intAdd(1, listLength(rest)) }
};

export let rec listAppend = match(tuple) {
  (Empty, ys) => { ys },
  (Link(x, rest), ys) => { Link(x, listAppend((rest, ys))) }
};

export let rec listMap = match(tuple) {
  (f, Empty) => { Empty },
  (f, Link(x, rest)) => { Link(f(x), listMap((f, rest))) }
};

export let rec listFilter = match(tuple) {
  (predicate, Empty) => { Empty },
  (predicate, Link(x, rest)) => {
    match(predicate(x)) {
      true => { Link(x, listFilter((predicate, rest))) },
      false => { listFilter((predicate, rest)) }
    }
  }
};

export let rec listFoldl = match(tuple) {
  (f, acc, Empty) => { acc },
  (f, acc, Link(x, rest)) => { listFoldl((f, f((acc, x)), rest)) }
};

export let rec listFoldr = match(tuple) {
  (f, acc, Empty) => { acc },
  (f, acc, Link(x, rest)) => { f((x, listFoldr((f, acc, rest)))) }
};

-- Helper for listReverse
let rec reverseAcc = match(tuple) {
  (Empty, acc) => { acc },
  (Link(x, rest), acc) => { reverseAcc((rest, Link(x, acc))) }
};

export let listReverse = (list) => {
  reverseAcc((list, Empty))
};

export let rec listRange = match(tuple) {
  (start, finish) => {
    match(intCompare(start, finish)) {
      GT => { Empty },
      _ => { Link(start, listRange((intAdd(start, 1), finish))) }
    }
  }
};

export let rec listInsertBy = match(tuple) {
  (cmp, value, list) => {
    match(list) {
      Empty => { Link(value, Empty) },
      Link(x, rest) => {
        match(cmp(value, x)) {
          GT => { Link(x, listInsertBy((cmp, value, rest))) },
          _ => { Link(value, Link(x, rest)) }
        }
      }
    }
  }
};

export let rec listInsertionSortBy = match(tuple) {
  (cmp, list) => {
    match(list) {
      Empty => { Empty },
      Link(x, rest) => { listInsertBy((cmp, x, listInsertionSortBy((cmp, rest)))) }
    }
  }
};

export let listSortInt = (list) => {
  listInsertionSortBy((intCompare, list))
};

-- Join a list of lists with a separator
-- For strings: listJoin((separator, listOfStrings))
export let rec listJoin = match(tuple) {
  (sep, Empty) => { Empty },
  (sep, Link(x, Empty)) => { x },
  (sep, Link(x, rest)) => { listAppend((x, listAppend((sep, listJoin((sep, rest)))))) }
};
