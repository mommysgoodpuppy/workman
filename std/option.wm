export type Option<T> = None | Some<T>;

export let map = match(tuple) {
  (f, Some(value)) => { Some(f(value)) },
  (_, None) => { None }
};

export let flatMap = match(tuple) {
  (f, Some(value)) => { f(value) },
  (_, None) => { None }
};

export let withDefault = match(tuple) {
  (defaultValue, Some(value)) => { value },
  (defaultValue, None) => { defaultValue }
};

export let orElse = match(tuple) {
  (fallback, Some(value)) => { Some(value) },
  (fallback, None) => { fallback() }
};

export let fromBool = match(tuple) {
  (condition, value) => {
    match(condition) {
      true => { Some(value) },
      false => { None }
    }
  }
};

export let toList = match(option) {
  Some(value) => { Cons(value, Nil) },
  None => { Nil }
};
