from "std/core/int" import { intAdd, intSub, intMul, intDiv, intCompare, intEq, intNeq };
from "std/core/bool" import { boolNot, boolAnd as boolAndImpl, boolOr as boolOrImpl };
export from "std/option/core" type Option(..);
export from "std/result/core" type Result(..);
export from "std/list/core" type List(..);


-- Char comparison (native)
export let charEq = (left, right) => {
  nativeCharEq(left, right)
};

export type Ordering = LT | EQ | GT;

export let add = (left, right) => {
  intAdd(left, right)
};

export let sub = (left, right) => {
  intSub(left, right)
};

export let mul = (left, right) => {
  intMul(left, right)
};

export let div = (left, right) => {
  intDiv(left, right)
};

export let cmpInt = (left, right) => {
  intCompare(left, right)
};

export let eq = (left, right) => {
  intEq(left, right)
};

export let neq = (left, right) => {
  intNeq(left, right)
};

-- Arithmetic operators
export infixl 6 + = add;
export infixl 6 - = sub;
export infixl 7 * = mul;
export infixl 7 / = div;

-- Comparison operators
export infix 4 == = eq;
export infix 4 != = neq;

-- Re-export bool functions for operators
export let boolAnd = (left, right) => {
  boolAndImpl(left, right)
};

export let boolOr = (left, right) => {
  boolOrImpl(left, right)
};

export let not = (value) => {
  boolNot(value)
};

-- Boolean operators
export infixr 3 && = boolAnd;
export infixr 2 || = boolOr;
export prefix ! = not;

export let print = (value) => {
  nativePrint(value)
};
