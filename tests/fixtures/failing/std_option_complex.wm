from "std/option/core" import { Option };
from "std/option" import { Some, None, map, flatMap, orElse, withDefault };

let inc = (n) => {
  add(n, 1)
};
let toDoubleIfOdd = (n) => {
  match(cmpInt(sub(n, mul(div(n, 2), 2)), 0)) {
    EQ => { None },
    _ => { Some(add(n, n)) }
  }
};

export let pipeline = () => {
  let start = Some(10);
  let mapped = map((inc, start));
  let chained = flatMap((toDoubleIfOdd, mapped));
  withDefault((0, chained))
};

export let fallback = () => {
  let missing = None;
  let fallback = () => {
    Some(42)
  };
  orElse((fallback, missing))
};
