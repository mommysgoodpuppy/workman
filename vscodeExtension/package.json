{
  "name": "workman-language",
  "displayName": "Workman Language",
  "description": "Language support for Workman - a minimal ML with Hindley-Milner type inference",
  "version": "0.0.2",
  "publisher": "workman",
  "repository": {
    "type": "git",
    "url": "https://github.com/yourusername/workman"
  },
  "engines": {
    "vscode": "^1.99.0"
  },
  "categories": [
    "Programming Languages",
    "Themes"
  ],
  "keywords": [
    "workman",
    "ml",
    "functional",
    "hindley-milner",
    "type-inference"
  ],
  "main": "./out/extension.js",
  "activationEvents": [
    "onLanguage:wm"
  ],
  "contributes": {
    "languages": [{
      "id": "wm",
      "aliases": ["Workman", "workman"],
      "extensions": [".wm"],
      "configuration": "./language-configuration.json",
      "icon": {
        "light": "./workman.svg",
        "dark": "./workman.svg"
      }
    }],
    "grammars": [{
      "language": "wm",
      "scopeName": "source.workman",
      "path": "./syntaxes/wm.tmLanguage.json"
    }],
    "iconThemes": [
      {
        "id": "workman-icons",
        "label": "Workman Icons",
        "path": "./workman-icon-theme.json"
      }
    ],
    "configuration": {
      "type": "object",
      "title": "Workman",
      "properties": {
        "workman.trace.server": {
          "scope": "window",
          "type": "string",
          "enum": ["off", "messages", "verbose"],
          "default": "off",
          "description": "Traces the communication between VS Code and the language server."
        },
        "workman.stdRoots": {
          "scope": "window",
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": ["std"],
          "description": "Paths where the language server should search for the standard library (relative to workspace folders or absolute)."
        },
        "workman.preludeModule": {
          "scope": "window",
          "type": "string",
          "default": "std/prelude",
          "description": "Module specifier for the prelude module automatically injected into modules."
        }
      }
    }
  },
  "scripts": {
    "clean-server-bin": "node -e \"const fs=require('fs');const p=require('path');const base=process.cwd();const targets=[p.join(base,'server','workman-lsp.exe'),p.join(base,'server','workman-lsp')];for(const f of targets){try{fs.rmSync(f,{force:true});}catch(e){console.error('Failed to remove '+f+': '+e);process.exit(1);}}\"",
    "build-server": "deno compile --allow-all --config=server/deno.json --output=server/workman-lsp server/src/server.ts",
    "vscode:prepublish": "npm run clean-server-bin && npm run build-server && npm run compile",
    "compile": "tsc -p ./",
    "watch": "tsc -watch -p ./"
  },
  "dependencies": {
    "vscode-languageclient": "^9.0.1"
  },
  "devDependencies": {
    "@types/node": "^20.0.0",
    "@types/vscode": "1.99.0",
    "typescript": "^5.0.0"
  }
}
