-- Workman Language Example
-- This file demonstrates syntax highlighting

-- Type declarations

-- Simple function
let identity = (x) => {
  x
};

-- First-class match
let firstUserId = match(list) {
  Link(id, _) => { Some(id) },
  Empty => { None }
};

-- Recursive function
let rec length = match(list) {
  Link(_, rest) => { length(rest) },
  Empty => { 0 }
};

-- Mutual recursion
let rec isEven = match(n) {
  0 => { true },
  _ => { isOdd(0) }
}
and isOdd = match(n) {
  0 => { false },
  _ => { isEven(0) }
};

-- Curried function
let rec map = (f) => {
  (list) => {
    match(list) {
      Link(x, rest) => { Link(f(x), map(f)(rest)) },
      Empty => { Empty }
    }
  }
};

-- Pattern matching with tuples
let fst = match(pair) {
  (x, _) => { x }
};

-- Nested patterns
let unwrap = match(opt) {
  Some(Some(x)) => { x },
  Some(None) => { 0 },
  None => { 0 }
};

-- Boolean literals
let not = match(b) {
  true => { false },
  false => { true }
};

-- Integer literals
let isZero = match(n) {
  0 => { true },
  _ => { false }
};
