-- Workman Language Showcase
-- A long-running program demonstrating recursion and pattern matching

-- === Counter with Limit ===
-- Recursively prints numbers up to a limit
-- Note: Deep recursion will overflow the stack since JavaScript doesn't have TCO

let rec countUpTo = match(tuple) {
  (current, max) => {
    match(cmpInt(current, max)) {
      GT => { print("Done counting!") },
      _ => {
        print(current);
        countUpTo((current, max))
      }
    }
  }
};

-- === Countdown Timer ===
-- Counts down from a number to zero

let rec countdown = match(n) {
  0 => { print("Blast off!") },
  _ => {
    print(n);
    countdown(n - 1)
  }
};

-- === Pattern-Based Printer ===
-- Prints different messages based on number patterns

let rec printPattern = match(tuple) {
  (n, max) => {
    match(cmpInt(n, max)) {
      GT => { print("Done!") },
      _ => {
        match(cmpInt(n, 0)) {
          EQ => {
            print("Zero");
            printPattern((n + 1, max))
          },
          _ => {
            print(n);
            printPattern((n + 1, max))
          }
        }
      }
    }
  }
};

-- === Basic Arithmetic ===
-- Using infix operators: +, -, *, /

let sum = () => {
  1 + 2 + 3
};

let product = () => {
  4 * 5
};

let calculation = () => {
  (10 + 5) * 2 - 3
};

-- === Boolean Logic ===
-- Using prefix operator ! (not) and infix operators && (and), || (or)

let isTrue = () => {
  true
};

let isFalse = () => {
  false
};

let notTrue = () => {
  !true
};

let andExample = () => {
  true && false
};

let orExample = () => {
  true || false
};

let complexBoolean = () => {
  (true && true) || (false && true)
};

-- === Comparisons ===
-- Using operators: ==, !=

let isEqual = () => {
  5 == 5
};

let notEqual = () => {
  3 != 7
};

let compareResult = () => {
  (2 + 2) == 4
};

-- === Simple Functions ===

let double = (x) => {
  x * 2
};

let square = (x) => {
  x * x
};

let isEven = (n) => {
  match(cmpInt(n, 0)) {
    EQ => { true },
    _ => { false }
  }
};

-- === Pattern Matching ===

let zero = match {
  0 => { "zero" },
};
let one = match {
  1 => { "one" }
};
let other = match {
  _ => { "other" }
};
let grouped = match {
  zero,
  one
};
let describeNumber = match(n) {
  grouped,
  other
};

let boolToString = match(b) {
  true => { "yes" },
  false => { "no" }
};

-- === Recursion ===

let rec factorial = match(n) {
  0 => { 1 },
  1 => { 1 },
  _ => { n * factorial(n - 1) }
};

let rec fibonacci = match(n) {
  0 => { 0 },
  1 => { 1 },
  _ => { fibonacci(n - 1) + fibonacci(n - 2) }
};

-- === Working with Lists ===

let myList = () => {
  Link(1, Link(2, Link(3, Empty)))
};

let rec listLength = match(list) {
  Empty => { 0 },
  Link(_, tail) => { 1 + listLength(tail) }
};

let rec listSum = match(list) {
  Empty => { 0 },
  Link(head, tail) => { head + listSum(tail) }
};

-- === Example Computations ===

let doubleOfFive = () => {
  double(5)
};

let squareOfSeven = () => {
  square(7)
};

let factorialOfFive = () => {
  factorial(5)
};

let fibonacciOfSix = () => {
  fibonacci(6)
};

let lengthOfList = () => {
  listLength(myList())
};

let sumOfList = () => {
  listSum(myList())
};

-- === Start Long-Running Program ===
-- The main function is automatically executed!
-- Change the function call below to try different examples:
-- Note: Keep recursion depth reasonable (< 1000) to avoid stack overflow

let main = () => {
  printPattern((0, 20))      -- Prints 0 to 20 with pattern matching
  -- countdown(10)              -- Counts down from 10 to 0
  -- countUpTo((1, 20));           -- Counts from 1 to 500
};
