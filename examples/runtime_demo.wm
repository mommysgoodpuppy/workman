type Status = StatusEmpty | StatusNonEmpty;

let rec factorial = (n) => {
  match(n) {
    0 => { 1 },
    _ => { mul(n, factorial(sub(n, 1))) }
  }
};

let rec countdown = (n) => {
  match(n) {
    0 => { Link(0, Empty) },
    _ => { Link(n, countdown(sub(n, 1))) }
  }
};

let rec sumList = (list) => {
  match(list) {
    Empty => { 0 },
    Link(x, rest) => { add(x, sumList(rest)) }
  }
};

let rec mapFactorial = (list) => {
  match(list) {
    Empty => { Empty },
    Link(x, rest) => { Link(factorial(x), mapFactorial(rest)) }
  }
};

let describeList = match(list) {
  Empty => { StatusEmpty },
  Link(_, _) => { StatusNonEmpty }
};

let buildDemo = (numbers) => {
  match(mapFactorial(numbers)) {
    totals => { (
      numbers,
      totals,
      sumList(numbers),
      factorial(5),
      describeList(totals)
    ) }
  }
};

let demo = {
  print(buildDemo(countdown(5)))
};
