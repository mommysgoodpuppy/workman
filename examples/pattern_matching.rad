-- Inventory tracking with tagged lists and order records.
type Option<T> = None | Some<T>;
type Order = Order<Int, Int>; -- order id, quantity

-- Retrieve the most recent stock quantity if we have any entries.
let latestStockLevel(stockHistory) = {
  match(stockHistory) {
    case Cons(stock, _) => Some(stock),
    case Nil => None
  }
};

-- Extract the quantity from an order using pattern matching.
let orderQuantity(order) = {
  match(order) {
    case Order(_, quantity) => quantity
  }
};

-- Decide how to respond to inventory state using first-class matches.
type Alert = Restock<Int> | Monitor;

let planNextStep(target) = {
  (status, history) => {
    match(status, history) {
      case (Some(stock), _) => Monitor,
      case (None, _) => Restock(target)
    }
  }
};

let evaluateInventory(target, stockHistory) = {
  let status = latestStockLevel(stockHistory);
  planNextStep(target)(status, stockHistory)
};
