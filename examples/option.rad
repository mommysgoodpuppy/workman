type Option<T> = None | Some<T>;

let sampleIds() = {
  Cons(1, Cons(42, Nil))
};

let firstUserId() = {
  match(sampleIds()) {
    case Cons(id, _) => Some(id),
    case Nil => None
  }
};

let pickUserId(fallback, maybeId) = {
  match(maybeId) {
    case Some(id) => id,
    case None => fallback
  }
};

let mapOption(f, opt) = {
  match(opt) {
    case Some(x) => Some(f(x)),
    case None => None
  }
};

let incremented() = {
  mapOption((x) => x + 1, Some(5))
};
